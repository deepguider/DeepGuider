!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CustomImageDataset	CustomImageDataset.py	/^class CustomImageDataset(Dataset):$/;"	c
FeatureExtractor	gradcam_custom.py	/^class FeatureExtractor():$/;"	c
GradCam	gradcam_custom.py	/^class GradCam:$/;"	c
GuidedBackpropReLU	gradcam_custom.py	/^class GuidedBackpropReLU(Function):$/;"	c
GuidedBackpropReLUModel	gradcam_custom.py	/^class GuidedBackpropReLUModel:$/;"	c
ModelOutputs	gradcam_custom.py	/^class ModelOutputs():$/;"	c
POSE_RECOG	pose_recog.hpp	/^    class POSE_RECOG : public PythonModuleWrapper$/;"	c	namespace:dg
POSE_RECOGResult	pose_recog.hpp	/^    struct POSE_RECOGResult$/;"	s	namespace:dg
VGG_POST	vgg_post.py	/^class VGG_POST(nn.Module):$/;"	c
__POSE_RECOG__	pose_recog.hpp	2;"	d
__call__	gradcam_custom.py	/^    def __call__(self, input, index=None):$/;"	m	class:GuidedBackpropReLUModel	file:
__call__	gradcam_custom.py	/^    def __call__(self, x):$/;"	m	class:FeatureExtractor	file:
__call__	gradcam_custom.py	/^    def __call__(self, x):$/;"	m	class:ModelOutputs	file:
__call__	gradcam_custom.py	/^    def __call__(self, x, index=None):$/;"	m	class:GradCam	file:
__getitem__	CustomImageDataset.py	/^    def __getitem__(self, index):$/;"	m	class:CustomImageDataset	file:
__init__	CustomImageDataset.py	/^    def __init__(self, data_set_path, transform=None):$/;"	m	class:CustomImageDataset
__init__	gradcam_custom.py	/^    def __init__(self, model, feature_module, target_layer_names, use_cuda):$/;"	m	class:GradCam
__init__	gradcam_custom.py	/^    def __init__(self, model, feature_module, target_layers):$/;"	m	class:ModelOutputs
__init__	gradcam_custom.py	/^    def __init__(self, model, target_layers):$/;"	m	class:FeatureExtractor
__init__	gradcam_custom.py	/^    def __init__(self, model, use_cuda):$/;"	m	class:GuidedBackpropReLUModel
__init__	pose_recog.py	/^    def __init__(self):$/;"	m	class:pose_recog
__init__	vgg_post.py	/^    def __init__(self, height, width):$/;"	m	class:VGG_POST
__len__	CustomImageDataset.py	/^    def __len__(self):$/;"	m	class:CustomImageDataset	file:
_apply	pose_recog.hpp	/^        bool _apply(cv::Mat image, int N, double gps_lat, double gps_lon, double gps_accuracy, dg::Timestamp ts, const char* ipaddr)$/;"	f	class:dg::POSE_RECOG
_make_layers	vgg_post.py	/^    def _make_layers(self, cfg):$/;"	m	class:VGG_POST
apply	pose_recog.hpp	/^        bool apply(cv::Mat image, int N, double gps_lat, double gps_lon, double gps_accuracy, dg::Timestamp ts, const char* ipaddr)$/;"	f	class:dg::POSE_RECOG
apply	pose_recog.py	/^    def apply(self, img_cv2):  # for single test image$/;"	m	class:pose_recog
apply_gradcam	pose_recog.py	/^    def apply_gradcam(self, img_cv2):  # for single test image$/;"	m	class:pose_recog
args	gradcam_custom.py	/^    args = get_args()$/;"	v
backward	gradcam_custom.py	/^    def backward(self, grad_output):$/;"	m	class:GuidedBackpropReLU
cam_gb	gradcam_custom.py	/^    cam_gb = deprocess_image(cam_mask*gb)$/;"	v
cam_mask	gradcam_custom.py	/^    cam_mask = cv2.merge([mask, mask, mask])$/;"	v
cfg	vgg_post.py	/^cfg = {$/;"	v
clear	pose_recog.hpp	/^        void clear()$/;"	f	class:dg::POSE_RECOG
confidence	pose_recog.hpp	/^        double confidence;$/;"	m	struct:dg::POSE_RECOGResult
cv2_print_cmd	pose_recog.py	/^    def cv2_print_cmd(self):$/;"	m	class:pose_recog
deprocess_image	gradcam_custom.py	/^def deprocess_image(img):$/;"	f
dg	pose_recog.hpp	/^namespace dg$/;"	n
draw	pose_recog.hpp	/^        void draw(cv::Mat& image, cv::Scalar color = cv::Scalar(0, 255, 0), int width = 2) const$/;"	f	class:dg::POSE_RECOG
fig	pose_recog.py	/^    fig = plt.figure()$/;"	v
fnlist	pose_recog.py	/^    fnlist = mod_pose_recog.read_testdata('\/home\/ccsmm\/workdir\/DB_Repo\/ETRI_CartRobot\/extracted\/200626')$/;"	v
forward	gradcam_custom.py	/^    def forward(self, input):$/;"	m	class:GuidedBackpropReLU
forward	gradcam_custom.py	/^    def forward(self, input):$/;"	m	class:GuidedBackpropReLUModel
forward	gradcam_custom.py	/^    def forward(self, x):$/;"	m	class:GradCam
forward	vgg_post.py	/^    def forward(self, x):  # x from pretrained VGG16,$/;"	m	class:VGG_POST
gb	gradcam_custom.py	/^    gb = deprocess_image(gb)$/;"	v
gb	gradcam_custom.py	/^    gb = gb.transpose((1, 2, 0))$/;"	v
gb	gradcam_custom.py	/^    gb = gb_model(input, index=target_index)$/;"	v
gb_model	gradcam_custom.py	/^    gb_model = GuidedBackpropReLUModel(model=model, use_cuda=args.use_cuda)$/;"	v
get	pose_recog.hpp	/^        void get(std::vector<POSE_RECOGResult>& streetviews) const$/;"	f	class:dg::POSE_RECOG
get	pose_recog.hpp	/^        void get(std::vector<POSE_RECOGResult>& streetviews, Timestamp& ts) const$/;"	f	class:dg::POSE_RECOG
get_args	gradcam_custom.py	/^def get_args():$/;"	f
get_gradients	gradcam_custom.py	/^    def get_gradients(self):$/;"	m	class:ModelOutputs
grad_cam	gradcam_custom.py	/^                       target_layer_names=["2"], use_cuda=args.use_cuda)$/;"	v
id	pose_recog.hpp	/^        dg::ID id;$/;"	m	struct:dg::POSE_RECOGResult
idx_max	pose_recog.py	/^    idx_max = len(fnlist)$/;"	v
img	gradcam_custom.py	/^    img = cv2.imread(args.image_path, 1)$/;"	v
img	gradcam_custom.py	/^    img = np.float32(cv2.resize(img, (224, 224))) \/ 255$/;"	v
initialize	pose_recog.hpp	/^        bool initialize(const char* module_name = "pose_recog", const char* module_path = ".\/..\/src\/pose_recog", const char* class_name = "pose_recog", const char* func_name_init = "initialize", const char* func_name_apply = "apply")$/;"	f	class:dg::POSE_RECOG
initialize	pose_recog.py	/^    def initialize(self, resume=True):$/;"	m	class:pose_recog
input	gradcam_custom.py	/^    input = preprocess_image(img)$/;"	v
m_processing_time	pose_recog.hpp	/^        double m_processing_time = -1;$/;"	m	class:dg::POSE_RECOG
m_streetviews	pose_recog.hpp	/^        std::vector<POSE_RECOGResult> m_streetviews;$/;"	m	class:dg::POSE_RECOG
m_timestamp	pose_recog.hpp	/^        Timestamp m_timestamp = -1;$/;"	m	class:dg::POSE_RECOG
mask	gradcam_custom.py	/^    mask = grad_cam(input, target_index)  # When target_index is None, grad_cam will choose argmax$/;"	v
mod_pose_recog	pose_recog.py	/^    mod_pose_recog = pose_recog()$/;"	v
model	gradcam_custom.py	/^    model = models.resnet50(pretrained=True)$/;"	v
name	pose_recog.hpp	/^        static const char* name()$/;"	f	class:dg::POSE_RECOG
pose_recog	pose_recog.py	/^class pose_recog:  # pose recognition$/;"	c
preprocess_image	gradcam_custom.py	/^def preprocess_image(img):$/;"	f
preprocess_image	pose_recog.py	/^    def preprocess_image(self, img_cv2):  # transform for input image (img) from cv2.imread(), uint8$/;"	m	class:pose_recog
print	pose_recog.hpp	/^        void print() const$/;"	f	class:dg::POSE_RECOG
procTime	pose_recog.hpp	/^        double procTime() const$/;"	f	class:dg::POSE_RECOG
read	pose_recog.hpp	/^        void read(const std::vector<std::string>& stream)$/;"	f	class:dg::POSE_RECOG
read_data_set	CustomImageDataset.py	/^    def read_data_set(self):$/;"	m	class:CustomImageDataset
read_testdata	pose_recog.py	/^    def read_testdata(self, data_set_path='\/home\/ccsmm\/workdir\/DB_Repo\/ETRI_CartRobot\/extracted\/200626'):$/;"	m	class:pose_recog
recursive_relu_apply	gradcam_custom.py	/^        def recursive_relu_apply(module_top):$/;"	f	function:GuidedBackpropReLUModel.__init__
save_gradient	gradcam_custom.py	/^    def save_gradient(self, grad):$/;"	m	class:FeatureExtractor
set	pose_recog.hpp	/^        void set(const std::vector<POSE_RECOGResult>& streetviews, Timestamp ts, double proc_time)$/;"	f	class:dg::POSE_RECOG
show_cam_on_image	gradcam_custom.py	/^def show_cam_on_image(img, mask):$/;"	f
show_cam_on_image	pose_recog.py	/^    def show_cam_on_image(self, img_float, mask):$/;"	m	class:pose_recog
target_index	gradcam_custom.py	/^    target_index = None$/;"	v
timestamp	pose_recog.hpp	/^        dg::Timestamp timestamp() const$/;"	f	class:dg::POSE_RECOG
write	pose_recog.hpp	/^        void write(std::ofstream& stream, int cam_fnumber = -1) const$/;"	f	class:dg::POSE_RECOG
